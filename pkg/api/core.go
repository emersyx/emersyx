package api

const (
	// CoreID is the constant value returned by the CoreEvent.GetSourceIdentifier method. All emersyx components can use
	// this constant value to identify events generated by the emersyx core.
	CoreID = "emersyx_core"
	// CoreUpdate is the constant value used for the CoreEvent.Type field for events which notify of updates.
	CoreUpdate = "emersyx_core_update"
	// CoreError is the constant value used for the CoreEvent.Status field for events which notify of errors.
	CoreError = "emersyx_core_error"
	// PeripheralsLoaded is the constant value used for the CoreEvent.Status field for updates which notify that all
	// peripherals have been loaded and are available via the emersyx router.
	PeripheralsLoaded = "emersyx_core_peripherals_loaded"
	// RouterStarted is the constant value used for the CoreEvent.Status field for updates which notify that the emersyx
	// router has been started and is currently routing events from receptors and processors.
	RouterStarted = "emersyx_core_router_started"
)

// Core is the interface which must be implemented by the emersyx core component. This interface defines all the core
// services which can be performed for any emersyx component.
type Core interface {
	// GetPeripheral must search for the Peripheral object loaded by the emersyx core. If such an instance is found,
	// then it must be returned.
	GetPeripheral(id string) (Peripheral, bool)
	// ForEachPeripheral must call the function provided as argument, sequentially with each peripheral currently
	// available to the core as argument.
	ForEachPeripheral(f func(Peripheral)) error
}

// CoreEvent is the type which implements the Event interface and is used for events generated by the emersyx core. The
// Type and Status fields have predefined constant values from the core.go source file.
type CoreEvent struct {
	Type   string
	Status string
}

// GetSourceIdentifier returns the constant value CoreID.
func (ev CoreEvent) GetSourceIdentifier() string {
	return CoreID
}

// NewCoreEvent is a utility function for creating CoreEvent instances with the specified type and status fields.
func NewCoreEvent(evType string, evStatus string) CoreEvent {
	var ev CoreEvent
	ev.Type = evType
	ev.Status = evStatus
	return ev
}
